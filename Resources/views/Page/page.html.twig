{% extends "GXHomeAutomationBundle::base.html.twig" %}

{% block title %}{{home.name}}{% endblock %}

{% block stylesheets %}
	{% stylesheets
		'bundles/gxhomeautomation/css/jquery-ui.min.css'
        'bundles/gxangularmaterial/css/patternLock.css'
        'bundles/gxhomeautomation/css/main.css'
        'bundles/gxhomeautomation/css/page.css'
        'bundles/gxhomeautomation/css/animations.css'
        'bundles/gxhomeautomation/css/jquery.temperatureloader-0.1.css'
        'bundles/gxhomeautomation/css/jquery.planer-0.1.css'
        filter='?phpcssembed,cssrewrite' %} {# filter='?phpcssembed,cssrewrite' #}
	    <link rel="stylesheet" href="{{ asset_url }}" />
		<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	{% endstylesheets %}
{% endblock %}

{% block javascripts %}
	{% javascripts
	    '@GXHomeAutomationBundle/Resources/public/js/jquery-2.1.1.min.js'
	    '@GXHomeAutomationBundle/Resources/public/js/jquery-ui.min.js'
	    '@GXAngularMaterialBundle/Resources/public/js/patternLock.min.js'
		'@GXHomeAutomationBundle/Resources/public/js/jquery.temperatureloader-0.1.js'
		'@GXHomeAutomationBundle/Resources/public/js/jquery.planer-0.1.js'
		'@GXHomeAutomationBundle/Resources/public/js/jquery.countdown.js'
		'@GXHomeAutomationBundle/Resources/public/js/utils.js'
		'@GXAngularMaterialBundle/Resources/public/js/gridList.js'
		'@GXAngularMaterialBundle/Resources/public/js/jquery.gridList.js'
		'@GXAngularMaterialBundle/Resources/public/js/jquery.ui.touch-punch.min.js'
		'@GXAngularMaterialBundle/Resources/public/js/gx-grid-stack.js'
		 %} {# filter='?closure' #}
	    <script src="{{ asset_url }}"></script>
	{% endjavascripts %}
	<script>
		var gridStack = null, init, matrix;
		var loaderUrl = '{{ path("_component_show_get") }}';
		var app = angular.module('GXHomeAutomationApp', ['ngMaterial', 'ngMessages'])

		app
		{{ include('GXHomeAutomationBundle::ng-config.js.twig') }}
		.controller("MainCtrl", function($rootScope, $scope, $mdSidenav, $window) {

			// toolbar actions
			$scope.toolbar = {
				logout: function() {
					$window.location.href = '{{ path("_home_logout") }}';
				},
				goToPage: function(pageId) {
					$window.location.href = '{{ path("_home_page_main", {'home_id': home.id, 'page_id': 999999 }) }}'.replace(/999999/, pageId);
				},
				notifications: {
					postSuccess: function(message) {
						console.log(message);
						// TODO !110.
					},
					postError: function(message) {
						console.log(message);
						// TODO !110.
					}
				}
			};
			$rootScope.notifications = $scope.toolbar.notifications;

			// edit mode
			$rootScope.editMode = {
				show: false,
				columnCount: {{page.getLayout()}}
			};
			$scope.editMode = $rootScope.editMode;
			$scope.$watch('editMode.columnCount', function() {
				if (gridStack !== null) // cancel effect at init
					gridStack.setLanes($scope.editMode.columnCount);
			});
			$rootScope.removeComponent = function(componentId) {
				// remove component from matrix
				var newMatrix = [];
				for (var i = 0; i < matrix.length; i++) {
					if (matrix[i]['id'] != componentId) {
						newMatrix.push(matrix[i]);
					}
				}
				matrix = newMatrix;
				// update DB (remove component and update page)
				$.post(
					'{{ path("_component_remove", {'page_id': page.id}) }}',
					{
						'matrix': matrix,
						'id': componentId
					}
				).done(function(data) {
					$(init()); // reinit gridStack
					$scope.toolbar.notifications.postSuccess('Component removed with success!');
				}).fail(function() {
					$scope.toolbar.notifications.postError('Error removing component!');
				});
			};

			// refresh features
			$rootScope.refresh = []; // functions to execute to force refresh of a card.
			this.refreshAll = function() {
				for (var i = 0; i < $rootScope.refresh.length; i++) {
					if (typeof $rootScope.refresh[i] == 'function')
						$rootScope.refresh[i]();
				}
			};

			// sidenav new components
			$rootScope.addComponentsPanel = {
				toggle: function() {
					$mdSidenav('addComponentsSidenav').toggle();
				},
				isOpen: function() {
					return $mdSidenav('addComponentsSidenav').isOpen();
				}
			};
			this.toggleAddComponents = $scope.addComponentsPanel.toggle;

			// Myfox common data
			$rootScope.myfox = {
				home_key: "{{ home.getHomeKey }}",
				scenarii: null,
				onDemandScenarii: null,
				loadScenarii: function() {
					if ($rootScope.myfox.scenarii === null) {
						var url = "{{ path("_get_sync_myfox") }}";
						return $.post(url, {
							'home_key': "{{ home.getHomeKey }}",
							'command': "CMD_GET_SCENARIO_ITEMS",
							'parameters': []
						}, function(data) {
							if (data['status'] == 'OK') {
								$rootScope.myfox.scenarii = [];
								$rootScope.myfox.onDemandScenarii = [];
								for (var i = 0; i< data['payload']['items'].length; i++) {
									var item = data['payload']['items'][i];
									$rootScope.myfox.scenarii.push(item);
									if (item['typeLabel'] == 'onDemand') {
										$rootScope.myfox.onDemandScenarii.push(item);
									}
								}
							}
						}, 'json');
					}
				},
			};
		});

		// Angular Add components sidenav controller
		app.controller('AddComponentsCtrl', function ($scope, $mdSidenav, $rootScope) {
			$scope.close = function() {
				$mdSidenav('addComponentsSidenav').close();
			};
			this.addComponent = function(type, w, h) {
				var position = gridStack.findFreeSpaceXY(w, h);
				$.post(
					'{{ path("_component_add", {'page_id': page.id}) }}',
					{
						'type': type,
						'position': position,
						'dimensions': {'w': w, 'h': h}
					}
				).done(function(data) {
					matrix.push({ 'id': data, 'w': w, 'h': h, 'x': position['x'], 'y': position['y'] });
					$(init()); // reinit gridStack
					$rootScope.notifications.postSuccess('Component added with success!');
				}).fail(function() {
					$rootScope.notifications.postError('No room to add or error adding component!');
				});
				$scope.close();
			};
		});

		// init
		matrix = {{page.positions|default("[]")|raw}};
		init = function() {
			gridStack = $('#grid').gridStack({
				matrix: matrix,
				onChange: function(changedItems, mx) {
					$.post(
						'{{ path("_home_page_commit", {'page_id': page.id}) }}',
						{
							'page': {'positions': mx}
						}
					).done(function() {
						matrix = mx;
						var scope = angular.element($("#MainCtrl")).scope();
						scope.$apply(function(){
							scope.toolbar.notifications.postSuccess('Components positions saved.');
						});
					}).fail(function() {
						var scope = angular.element($("#MainCtrl")).scope();
						scope.$apply(function(){
							scope.toolbar.notifications.postError('Components positions cannot be saved.');
						});
					});
				},
				lanes: {{page.getLayout()}},
				elementPrototype: 'li.position-card',
				elementLoaderUrl: loaderUrl,
				draggableParams: {
					handle: '.handle',
					helper: 'original'
				}
			});
		};
		$(init());
		$('#screen-shield').html('').css('background', 'transparent');
		window.setTimeout(function() {
			$('#screen-shield').remove();
		}, 2000);
	</script>
{% endblock %}

{% block body %}
<div layout="column" layout-fill style="overflow:hidden;" ng-controller="MainCtrl as MainCtrl" id="MainCtrl">

	<md-toolbar md-scroll-shrink>
		<div class="md-toolbar-tools" ng-cloak>

			<md-button aria-label="Logout" tabindex="501">
				<md-icon aria-label="receipt" class="material-icons md-24">receipt</md-icon>
				(0)
			</md-button>
			{# TODO !110: notif center et icones de notifs ! #}
			[notifs]

			<span flex></span>
			<h2>
				<md-icon aria-label="home" class="material-icons md-24 icon-img-centered">home</md-icon>
				<span>{{home.name}} ~ {{page.name}}</span>
			</h2>
			<span flex></span>

			{# TODO !110: si trop nombreux, doit passer dans un menu deroulant ! #}
			{% for other_page in home.getPages() %}
				{% if other_page.id != page.id %}
					<md-button aria-label="Homes" ng-click="toolbar.goToPage({{other_page.id}})" tabindex="502">
						<md-icon aria-label="bookmark_border" class="material-icons md-24">bookmark_border</md-icon>
						{{other_page.name}}
					</md-button>
				{% endif %}
			{% endfor %}

			<md-button aria-label="Logout" ng-click="toolbar.logout()" tabindex="503">
				<md-icon aria-label="exit_to_app" class="material-icons md-24">exit_to_app</md-icon>
				Logout
			</md-button>
		</div>
	</md-toolbar>

	<md-content xstyle="right:-18px;" flex>
		<div flex>
			<ul id="grid" class="grid">
				<li class="position-highlight">
					<div class="inner md-whiteframe-1dp"></div>
				</li>
				<li class="position-card">
					<md-card class="md-whiteframe-6dp inner">
						<div flex layout="column" layout-align="center center">
							<md-progress-circular md-diameter="196" md-mode="indeterminate" style="position:relative; top:18px;"></md-progress-circular>
							<md-button aria-label="Refresh" ng-click="alert('todo')" {# TODO !0: le refresh on click #}
									   style="position:relative; bottom:100px; z-index:3; visibility: hidden;" class="md-icon-button md-warn">
								<md-icon aria-label="autorenew" class="material-icons md-14">autorenew</md-icon>
							</md-button>
						</div>
					</md-card>
				</li>
			</ul>
		</div>
	</md-content>

	<md-fab-toolbar class="md-fab-bottom-right" style="width:100%" md-direction="left" ng-cloak>
		<md-fab-trigger class="align-with-text">
			<md-button aria-label="menu" class="md-fab" ng-class="{{ '{' }}'md-hue-2': editMode.show == false, 'md-hue-1': editMode.show == true{{ '}' }}">
				<md-icon aria-label="build" class="material-icons md-24">build</md-icon>
			</md-button>
		</md-fab-trigger>
		<md-toolbar>
			<md-fab-actions class="md-toolbar-tools">
				<md-switch class="md-hue-1" aria-label="Switch to edit mode" ng-model="editMode.show">
					Edit mode
				</md-switch>
				<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

				<span ng-show="editMode.show">&nbsp;Colmuns</span>
				<md-slider ng-show="editMode.show" flex="no-shrink" style="width: 10em;"
						   md-discrete ng-model="editMode.columnCount" step="1" min="3" max="7" aria-label="columnCount">
				</md-slider>
				<span ng-show="editMode.show">&nbsp;&nbsp;&nbsp;&nbsp;</span>

				<md-button aria-label="Add card" ng-click="MainCtrl.toggleAddComponents()">
					<md-icon aria-label="add_box" class="material-icons md-24">add_box</md-icon>
					Add card
				</md-button>

				<md-button aria-label="Refresh" ng-click="MainCtrl.refreshAll()">
					<md-icon aria-label="autorenew" class="material-icons md-24">autorenew</md-icon>
					Refresh
				</md-button>
			</md-fab-actions>
		</md-toolbar>
	</md-fab-toolbar>

</div>

<md-sidenav class="md-sidenav-right md-whiteframe-z2" md-component-id="addComponentsSidenav" ng-cloak>
	<md-toolbar class="md-theme-light">
		<h1 class="md-toolbar-tools">Add a component</h1>
	</md-toolbar>
	<md-list ng-controller="AddComponentsCtrl as AddComponentsCtrl">
		{% for component_type in component_types %}
			<md-list-item ng-click="AddComponentsCtrl.addComponent({{loop.index0}}, {{ component_preferred_sizes[loop.index0]['w'] }}, {{ component_preferred_sizes[loop.index0]['h'] }})">
				<md-icon aria-label="border_outer" class="material-icons md-24">border_outer</md-icon>
				<p>{{component_type}}</p>
			</md-list-item>
		{% endfor %}
		<md-divider></md-divider>
		<md-list-item>
			<md-button ng-click="close()">
				Cancel
			</md-button>
		</md-list-item>
	</md-list>
</md-sidenav>

{{ include('GXHomeAutomationBundle::loading-shield.html.twig') }}

{% endblock %}
